"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lcm_messages.nachi_joint_angles

class joint_trajectory_controller(object):
    __slots__ = ["timestamp", "control_points_size", "spline_order", "knot_points_size", "control_points", "knot_points"]

    __typenames__ = ["int64_t", "int32_t", "int32_t", "int32_t", "lcm_messages.nachi_joint_angles", "double"]

    __dimensions__ = [None, None, None, None, ["control_points_size"], ["knot_points_size"]]

    def __init__(self):
        self.timestamp = 0
        self.control_points_size = 0
        self.spline_order = 0
        self.knot_points_size = 0
        self.control_points = []
        self.knot_points = []

    def encode(self):
        buf = BytesIO()
        buf.write(joint_trajectory_controller._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiii", self.timestamp, self.control_points_size, self.spline_order, self.knot_points_size))
        for i0 in range(self.control_points_size):
            assert self.control_points[i0]._get_packed_fingerprint() == lcm_messages.nachi_joint_angles._get_packed_fingerprint()
            self.control_points[i0]._encode_one(buf)
        buf.write(struct.pack('>%dd' % self.knot_points_size, *self.knot_points[:self.knot_points_size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != joint_trajectory_controller._get_packed_fingerprint():
            raise ValueError("Decode error")
        return joint_trajectory_controller._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = joint_trajectory_controller()
        self.timestamp, self.control_points_size, self.spline_order, self.knot_points_size = struct.unpack(">qiii", buf.read(20))
        self.control_points = []
        for i0 in range(self.control_points_size):
            self.control_points.append(lcm_messages.nachi_joint_angles._decode_one(buf))
        self.knot_points = struct.unpack('>%dd' % self.knot_points_size, buf.read(self.knot_points_size * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if joint_trajectory_controller in parents: return 0
        newparents = parents + [joint_trajectory_controller]
        tmphash = (0xd25cba194723f657+ lcm_messages.nachi_joint_angles._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if joint_trajectory_controller._packed_fingerprint is None:
            joint_trajectory_controller._packed_fingerprint = struct.pack(">Q", joint_trajectory_controller._get_hash_recursive([]))
        return joint_trajectory_controller._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", joint_trajectory_controller._get_packed_fingerprint())[0]

