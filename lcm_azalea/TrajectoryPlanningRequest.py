"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lcm_azalea.TrajectoryType

import lcm_azalea.TrajectoryState

class TrajectoryPlanningRequest(object):
    __slots__ = ["timestamp", "uuid", "trajectory_type", "trajectory_name", "start_state", "goal_state", "num_control_points", "num_knot_points", "spline_order", "num_collision_checking_points", "percentage_of_max_velocity"]

    __typenames__ = ["int64_t", "string", "lcm_azalea.TrajectoryType", "string", "lcm_azalea.TrajectoryState", "lcm_azalea.TrajectoryState", "int16_t", "int16_t", "int8_t", "int32_t", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.uuid = ""
        self.trajectory_type = lcm_azalea.TrajectoryType()
        self.trajectory_name = ""
        self.start_state = lcm_azalea.TrajectoryState()
        self.goal_state = lcm_azalea.TrajectoryState()
        self.num_control_points = 0
        self.num_knot_points = 0
        self.spline_order = 0
        self.num_collision_checking_points = 0
        self.percentage_of_max_velocity = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(TrajectoryPlanningRequest._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __uuid_encoded = self.uuid.encode('utf-8')
        buf.write(struct.pack('>I', len(__uuid_encoded)+1))
        buf.write(__uuid_encoded)
        buf.write(b"\0")
        assert self.trajectory_type._get_packed_fingerprint() == lcm_azalea.TrajectoryType._get_packed_fingerprint()
        self.trajectory_type._encode_one(buf)
        __trajectory_name_encoded = self.trajectory_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__trajectory_name_encoded)+1))
        buf.write(__trajectory_name_encoded)
        buf.write(b"\0")
        assert self.start_state._get_packed_fingerprint() == lcm_azalea.TrajectoryState._get_packed_fingerprint()
        self.start_state._encode_one(buf)
        assert self.goal_state._get_packed_fingerprint() == lcm_azalea.TrajectoryState._get_packed_fingerprint()
        self.goal_state._encode_one(buf)
        buf.write(struct.pack(">hhbif", self.num_control_points, self.num_knot_points, self.spline_order, self.num_collision_checking_points, self.percentage_of_max_velocity))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TrajectoryPlanningRequest._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TrajectoryPlanningRequest._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = TrajectoryPlanningRequest()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __uuid_len = struct.unpack('>I', buf.read(4))[0]
        self.uuid = buf.read(__uuid_len)[:-1].decode('utf-8', 'replace')
        self.trajectory_type = lcm_azalea.TrajectoryType._decode_one(buf)
        __trajectory_name_len = struct.unpack('>I', buf.read(4))[0]
        self.trajectory_name = buf.read(__trajectory_name_len)[:-1].decode('utf-8', 'replace')
        self.start_state = lcm_azalea.TrajectoryState._decode_one(buf)
        self.goal_state = lcm_azalea.TrajectoryState._decode_one(buf)
        self.num_control_points, self.num_knot_points, self.spline_order, self.num_collision_checking_points, self.percentage_of_max_velocity = struct.unpack(">hhbif", buf.read(13))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if TrajectoryPlanningRequest in parents: return 0
        newparents = parents + [TrajectoryPlanningRequest]
        tmphash = (0xfc608088809328ec+ lcm_azalea.TrajectoryType._get_hash_recursive(newparents)+ lcm_azalea.TrajectoryState._get_hash_recursive(newparents)+ lcm_azalea.TrajectoryState._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if TrajectoryPlanningRequest._packed_fingerprint is None:
            TrajectoryPlanningRequest._packed_fingerprint = struct.pack(">Q", TrajectoryPlanningRequest._get_hash_recursive([]))
        return TrajectoryPlanningRequest._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TrajectoryPlanningRequest._get_packed_fingerprint())[0]

