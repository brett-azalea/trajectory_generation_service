"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class VacuumControllerExecutionRequest(object):
    __slots__ = ["timestamp", "uuid", "action"]

    __typenames__ = ["int64_t", "string", "int16_t"]

    __dimensions__ = [None, None, None]

    TURN_ON = 1
    TURN_OFF = 0

    def __init__(self):
        self.timestamp = 0
        self.uuid = ""
        self.action = 0

    def encode(self):
        buf = BytesIO()
        buf.write(VacuumControllerExecutionRequest._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __uuid_encoded = self.uuid.encode('utf-8')
        buf.write(struct.pack('>I', len(__uuid_encoded)+1))
        buf.write(__uuid_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">h", self.action))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != VacuumControllerExecutionRequest._get_packed_fingerprint():
            raise ValueError("Decode error")
        return VacuumControllerExecutionRequest._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = VacuumControllerExecutionRequest()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __uuid_len = struct.unpack('>I', buf.read(4))[0]
        self.uuid = buf.read(__uuid_len)[:-1].decode('utf-8', 'replace')
        self.action = struct.unpack(">h", buf.read(2))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if VacuumControllerExecutionRequest in parents: return 0
        tmphash = (0x628a4d0c362a8b95) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if VacuumControllerExecutionRequest._packed_fingerprint is None:
            VacuumControllerExecutionRequest._packed_fingerprint = struct.pack(">Q", VacuumControllerExecutionRequest._get_hash_recursive([]))
        return VacuumControllerExecutionRequest._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", VacuumControllerExecutionRequest._get_packed_fingerprint())[0]

