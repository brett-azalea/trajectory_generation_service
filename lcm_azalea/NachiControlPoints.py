"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class NachiControlPoints(object):
    __slots__ = ["num_control_points", "control_points"]

    __typenames__ = ["int32_t", "double"]

    __dimensions__ = [None, ["num_control_points", 8]]

    def __init__(self):
        self.num_control_points = 0
        self.control_points = []

    def encode(self):
        buf = BytesIO()
        buf.write(NachiControlPoints._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_control_points))
        for i0 in range(self.num_control_points):
            buf.write(struct.pack('>8d', *self.control_points[i0][:8]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != NachiControlPoints._get_packed_fingerprint():
            raise ValueError("Decode error")
        return NachiControlPoints._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = NachiControlPoints()
        self.num_control_points = struct.unpack(">i", buf.read(4))[0]
        self.control_points = []
        for i0 in range(self.num_control_points):
            self.control_points.append(struct.unpack('>8d', buf.read(64)))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if NachiControlPoints in parents: return 0
        tmphash = (0x9458dc204044b6ea) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if NachiControlPoints._packed_fingerprint is None:
            NachiControlPoints._packed_fingerprint = struct.pack(">Q", NachiControlPoints._get_hash_recursive([]))
        return NachiControlPoints._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", NachiControlPoints._get_packed_fingerprint())[0]

