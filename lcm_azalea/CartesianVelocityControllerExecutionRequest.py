"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lcm_azalea.RobotType

import lcm_azalea.Twist6d

class CartesianVelocityControllerExecutionRequest(object):
    __slots__ = ["timestamp", "uuid", "robot_type", "v_end_effector", "should_exit_when_vacuum_sealed", "should_failexit_on_zmin", "zmin", "should_failexit_on_duration", "max_duration"]

    __typenames__ = ["int64_t", "string", "lcm_azalea.RobotType", "lcm_azalea.Twist6d", "boolean", "boolean", "double", "boolean", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.uuid = ""
        self.robot_type = lcm_azalea.RobotType()
        self.v_end_effector = lcm_azalea.Twist6d()
        self.should_exit_when_vacuum_sealed = False
        self.should_failexit_on_zmin = False
        self.zmin = 0.0
        self.should_failexit_on_duration = False
        self.max_duration = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(CartesianVelocityControllerExecutionRequest._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __uuid_encoded = self.uuid.encode('utf-8')
        buf.write(struct.pack('>I', len(__uuid_encoded)+1))
        buf.write(__uuid_encoded)
        buf.write(b"\0")
        assert self.robot_type._get_packed_fingerprint() == lcm_azalea.RobotType._get_packed_fingerprint()
        self.robot_type._encode_one(buf)
        assert self.v_end_effector._get_packed_fingerprint() == lcm_azalea.Twist6d._get_packed_fingerprint()
        self.v_end_effector._encode_one(buf)
        buf.write(struct.pack(">bbdbd", self.should_exit_when_vacuum_sealed, self.should_failexit_on_zmin, self.zmin, self.should_failexit_on_duration, self.max_duration))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != CartesianVelocityControllerExecutionRequest._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CartesianVelocityControllerExecutionRequest._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = CartesianVelocityControllerExecutionRequest()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __uuid_len = struct.unpack('>I', buf.read(4))[0]
        self.uuid = buf.read(__uuid_len)[:-1].decode('utf-8', 'replace')
        self.robot_type = lcm_azalea.RobotType._decode_one(buf)
        self.v_end_effector = lcm_azalea.Twist6d._decode_one(buf)
        self.should_exit_when_vacuum_sealed = bool(struct.unpack('b', buf.read(1))[0])
        self.should_failexit_on_zmin = bool(struct.unpack('b', buf.read(1))[0])
        self.zmin = struct.unpack(">d", buf.read(8))[0]
        self.should_failexit_on_duration = bool(struct.unpack('b', buf.read(1))[0])
        self.max_duration = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if CartesianVelocityControllerExecutionRequest in parents: return 0
        newparents = parents + [CartesianVelocityControllerExecutionRequest]
        tmphash = (0x4bf86095142484d2+ lcm_azalea.RobotType._get_hash_recursive(newparents)+ lcm_azalea.Twist6d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if CartesianVelocityControllerExecutionRequest._packed_fingerprint is None:
            CartesianVelocityControllerExecutionRequest._packed_fingerprint = struct.pack(">Q", CartesianVelocityControllerExecutionRequest._get_hash_recursive([]))
        return CartesianVelocityControllerExecutionRequest._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", CartesianVelocityControllerExecutionRequest._get_packed_fingerprint())[0]

