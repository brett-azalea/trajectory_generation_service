"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lcm_azalea.Pose6d

import lcm_azalea.Twist6d

class EKFState(object):
    __slots__ = ["timestamp", "dimension_size", "pose", "twist", "covariance"]

    __typenames__ = ["int64_t", "int32_t", "lcm_azalea.Pose6d", "lcm_azalea.Twist6d", "double"]

    __dimensions__ = [None, None, None, None, ["dimension_size", "dimension_size"]]

    def __init__(self):
        self.timestamp = 0
        self.dimension_size = 0
        self.pose = lcm_azalea.Pose6d()
        self.twist = lcm_azalea.Twist6d()
        self.covariance = []

    def encode(self):
        buf = BytesIO()
        buf.write(EKFState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.dimension_size))
        assert self.pose._get_packed_fingerprint() == lcm_azalea.Pose6d._get_packed_fingerprint()
        self.pose._encode_one(buf)
        assert self.twist._get_packed_fingerprint() == lcm_azalea.Twist6d._get_packed_fingerprint()
        self.twist._encode_one(buf)
        for i0 in range(self.dimension_size):
            buf.write(struct.pack('>%dd' % self.dimension_size, *self.covariance[i0][:self.dimension_size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != EKFState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return EKFState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = EKFState()
        self.timestamp, self.dimension_size = struct.unpack(">qi", buf.read(12))
        self.pose = lcm_azalea.Pose6d._decode_one(buf)
        self.twist = lcm_azalea.Twist6d._decode_one(buf)
        self.covariance = []
        for i0 in range(self.dimension_size):
            self.covariance.append(struct.unpack('>%dd' % self.dimension_size, buf.read(self.dimension_size * 8)))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if EKFState in parents: return 0
        newparents = parents + [EKFState]
        tmphash = (0xd74c7b4e521cd0f3+ lcm_azalea.Pose6d._get_hash_recursive(newparents)+ lcm_azalea.Twist6d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if EKFState._packed_fingerprint is None:
            EKFState._packed_fingerprint = struct.pack(">Q", EKFState._get_hash_recursive([]))
        return EKFState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", EKFState._get_packed_fingerprint())[0]

