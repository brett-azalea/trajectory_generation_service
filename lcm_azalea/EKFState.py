"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class EKFState(object):
    __slots__ = ["dimension_size", "mean", "covariance"]

    __typenames__ = ["int16_t", "double", "double"]

    __dimensions__ = [None, ["dimension_size", 1], ["dimension_size", "dimension_size"]]

    def __init__(self):
        self.dimension_size = 0
        self.mean = []
        self.covariance = []

    def encode(self):
        buf = BytesIO()
        buf.write(EKFState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.dimension_size))
        for i0 in range(self.dimension_size):
            buf.write(struct.pack('>1d', *self.mean[i0][:1]))
        for i0 in range(self.dimension_size):
            buf.write(struct.pack('>%dd' % self.dimension_size, *self.covariance[i0][:self.dimension_size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != EKFState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return EKFState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = EKFState()
        self.dimension_size = struct.unpack(">h", buf.read(2))[0]
        self.mean = []
        for i0 in range(self.dimension_size):
            self.mean.append(struct.unpack('>1d', buf.read(8)))
        self.covariance = []
        for i0 in range(self.dimension_size):
            self.covariance.append(struct.unpack('>%dd' % self.dimension_size, buf.read(self.dimension_size * 8)))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if EKFState in parents: return 0
        tmphash = (0x215901dbb8a453e1) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if EKFState._packed_fingerprint is None:
            EKFState._packed_fingerprint = struct.pack(">Q", EKFState._get_hash_recursive([]))
        return EKFState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", EKFState._get_packed_fingerprint())[0]

