"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class Twist6d(object):
    __slots__ = ["frame_expressed_in", "v_xyz", "w_xyz"]

    __typenames__ = ["string", "double", "double"]

    __dimensions__ = [None, [3], [3]]

    def __init__(self):
        self.frame_expressed_in = ""
        self.v_xyz = [ 0.0 for dim0 in range(3) ]
        self.w_xyz = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(Twist6d._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __frame_expressed_in_encoded = self.frame_expressed_in.encode('utf-8')
        buf.write(struct.pack('>I', len(__frame_expressed_in_encoded)+1))
        buf.write(__frame_expressed_in_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>3d', *self.v_xyz[:3]))
        buf.write(struct.pack('>3d', *self.w_xyz[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Twist6d._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Twist6d._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Twist6d()
        __frame_expressed_in_len = struct.unpack('>I', buf.read(4))[0]
        self.frame_expressed_in = buf.read(__frame_expressed_in_len)[:-1].decode('utf-8', 'replace')
        self.v_xyz = struct.unpack('>3d', buf.read(24))
        self.w_xyz = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if Twist6d in parents: return 0
        tmphash = (0x7d47a97f2b619b91) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Twist6d._packed_fingerprint is None:
            Twist6d._packed_fingerprint = struct.pack(">Q", Twist6d._get_hash_recursive([]))
        return Twist6d._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", Twist6d._get_packed_fingerprint())[0]

