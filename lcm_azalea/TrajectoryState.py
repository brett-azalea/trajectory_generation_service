"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lcm_azalea.Pose6d

import lcm_azalea.TrajectoryStateType

class TrajectoryState(object):
    __slots__ = ["type", "dof", "joint_positions", "pose"]

    __typenames__ = ["lcm_azalea.TrajectoryStateType", "int16_t", "double", "lcm_azalea.Pose6d"]

    __dimensions__ = [None, None, ["dof"], None]

    def __init__(self):
        self.type = lcm_azalea.TrajectoryStateType()
        self.dof = 0
        self.joint_positions = []
        self.pose = lcm_azalea.Pose6d()

    def encode(self):
        buf = BytesIO()
        buf.write(TrajectoryState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.type._get_packed_fingerprint() == lcm_azalea.TrajectoryStateType._get_packed_fingerprint()
        self.type._encode_one(buf)
        buf.write(struct.pack(">h", self.dof))
        buf.write(struct.pack('>%dd' % self.dof, *self.joint_positions[:self.dof]))
        assert self.pose._get_packed_fingerprint() == lcm_azalea.Pose6d._get_packed_fingerprint()
        self.pose._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TrajectoryState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TrajectoryState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = TrajectoryState()
        self.type = lcm_azalea.TrajectoryStateType._decode_one(buf)
        self.dof = struct.unpack(">h", buf.read(2))[0]
        self.joint_positions = struct.unpack('>%dd' % self.dof, buf.read(self.dof * 8))
        self.pose = lcm_azalea.Pose6d._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if TrajectoryState in parents: return 0
        newparents = parents + [TrajectoryState]
        tmphash = (0x301b781903732cf8+ lcm_azalea.TrajectoryStateType._get_hash_recursive(newparents)+ lcm_azalea.Pose6d._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if TrajectoryState._packed_fingerprint is None:
            TrajectoryState._packed_fingerprint = struct.pack(">Q", TrajectoryState._get_hash_recursive([]))
        return TrajectoryState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TrajectoryState._get_packed_fingerprint())[0]

